#!/usr/bin/env python

import sciedpiper.Command as Command
import os, re, sys
import sciedpiper.ParentScript as ParentScript


UTILDIR = os.sep.join([os.path.dirname(__file__), "util/discAsmFusion-util"])

TRINITY_HOME = os.environ["TRINITY_HOME"]


if not os.environ.has_key('STAR_FUSION_DIR'):
    print >> sys.stderr, "Error, need STAR_FUSION_DIR env var set to STAR-Fusion installation directory"
    sys.exit(3)

        


class DiscordAFuse( ParentScript.ParentScript ):
    
    def func_update_arguments(self, arg_raw ):
        """
        Updates to the arg parser, command line options
        
        * arg_raw : Arguments ( not yet parsed )
                  : Arguments
        * return  : Updated Arguments
                  : Arguments
        """

        arg_raw.prog = "DiscordAFuse"
        arg_raw.description = "extracts genome-aligned discordant and unmapped reads, de novo assembles them, and then identifies evidence for potential fusions."

        arg_raw.add_argument("--aligned_bam", dest="aligned_bam_filename", required=True, help="aligned bam file from your favorite rna-seq alignment tool")
        arg_raw.add_argument("--genome_fa", dest="genome_fasta_filename", required=True, help="genome sequence in fasta format")
        arg_raw.add_argument("--cdna_fa", dest="cdna_fasta_filename", required=True, help="cdna fasta file")
        arg_raw.add_argument("--left_fq", dest="left_fq_filename", required=True, help="left fastq file")
        arg_raw.add_argument("--right_fq", dest="right_fq_filename", required=True, help="right fastq file")
        arg_raw.add_argument("--out_dir", dest="out_dirname", required=True, help="output directory")
        arg_raw.add_argument("--out_prefix", dest="out_prefix", required=True, help="output filename prefix")
        arg_raw.add_argument("--denovo_assembler", dest="denovo_assembler", required=True, help="de novo assembly method: Trinity|Oases")


        arg_raw.add_argument("--prep_for_IGV", dest="prep_for_IGV", required=False, action="store_true", default=False, help="generate bam, bed, etc., for use with IGV")
        arg_raw.add_argument("--write_intermediate_results", dest="write_intermediate_results", required=False, action="store_true", default=False, help="generate bam, bed, etc., for intermediate aligner outputs")
        

    def func_make_commands( self, args_parsed, cur_pipeline ):
        
        """
        Allows:
        - the creation of commands in the child object.
        - the creation of directories.
        - checking that files exist.
        
        To know the variables available from command line look in the ParentScript in func_create_arguments.
        """

        aligned_bam_filename = ensure_full_path(args.aligned_bam_filename)
        left_fq_filename = ensure_full_path(args.left_fq_filename)
        right_fq_filename = ensure_full_path(args.right_fq_filename)
        cdna_fasta_filename = ensure_full_path(args.cdna_fasta_filename)
        genome_fasta_filename = ensure_full_path(args.genome_fasta_filename)

        denovo_assembler = args.denovo_assembler

        if not re.match("trinity|oases", denovo_assembler, 'I'):
            raise Exception("Error, assembler: " + denovo_assembler + " is not recognized. Only 'Trinity' and 'Oases' are currently supported.")
        
        
        out_dirname = ensure_full_path(args_parsed.out_dirname)
        
        workdir = args_parsed.out_dirname + "/discardafuse_workdir"
        
        cur_pipeline.func_mkdirs( [ out_dirname, workdir ] )
        
        cur_pipeline.func_check_files_exist( [ aligned_bam_filename, left_fq_filename, right_fq_filename,
                                               cdna_fasta_filename, genome_fasta_filename ] )


        # relocate to the output directory
        os.chdir(our_dirname)
        

        ## Extract the discordant and unmapped reads into fastq files
        
        lcmd_commands = []

        cmdstr = str( os.sep.join([UTILDIR, "retrieve_discordant_and_unmapped_reads.py"]) + " " + aligned_bam_filename +
                                  " " + left_fq_filename + " " + right_fq_filename )

        discordant_left_fq_filename = left_fq_filename + ".extracted.fq"
        discordant_right_fq_filename = right_fq_filename + ".extracted.fq"

        
        lcmd_commands.append(Command.Command( str_cur_command = cmdstr,
                                              lstr_cur_dependencies = [ aligned_bam_filename, left_fq_filename, right_fq_filename ],
                                              lstr_cur_products = [discordant_left_fq_filename, discordant_right_fq_filename] ) )

        ## De novo assemble the extracted reads

        assembled_transcripts_filename = None

        if re.match("trinity", denovo_assembler, 'I'):

            cmdstr = str(TRINITY_HOME + "/Trinity --seqType fq --max_mem 30G " +
                         " --left " + discordant_left_fq_filename +
                         " --right " + discordant_right_fq_filename +
                         " --CPU 4 --full_cleanup --output trinity_out_dir " +
                         " --min_contig_length 100")
            
            assembled_transcripts_filename = "trinity_out_dir/Trinity.fasta"

        else:
            # oases
            # //TODO

            pass
        


        # map to genome


        # filter those that map just fine
        

        # map to transcriptome the ones that dont align fine to the genome


        # identify candidate fusion transcripts


        # filter these
        


        return lcmd_commands



    def get_fusion_and_spanning_reads (self, args_parsed, mergedContig_gtf_filename, mergedContig_fasta_filename, bam_file, lcmd_commands):
        
        ## extract the fusion JUNCTION reads
        fusion_junction_reads_sam_file = bam_file + ".fusion_junc_reads.sam"
        fusion_junction_info_file = bam_file + ".fusion_junction_info"
        
        cmdstr = str(os.sep.join([UTILDIR, "get_fusion_JUNCTION_reads_from_fusion_contig_bam.pl"]) + " " +
                     mergedContig_gtf_filename + " " +
                     bam_file + " > " + fusion_junction_reads_sam_file)

        lcmd_commands.append( Command.Command (str_cur_command = cmdstr,
                                              lstr_cur_dependencies = [ mergedContig_gtf_filename, bam_file ],
                                              lstr_cur_products = [ fusion_junction_reads_sam_file, fusion_junction_info_file ] ) )

        if args_parsed.write_intermidate_results:
            self.sort_sam_to_bam(fusion_junction_reads_sam_file, mergedContig_fasta_filename, lcmd_commands)

            ## convert the fusion JUNCTION reads sam file to bed format
            fusion_junction_reads_bed_file = bam_file + ".fusion_junc_reads.bed"
            cmdstr = str(TRINITY_HOME + "/util/misc/SAM_to_bed.pl " + fusion_junction_reads_sam_file +
                         " > " + fusion_junction_reads_bed_file)

            lcmd_commands.append( Command.Command ( str_cur_command = cmdstr,
                                                   lstr_cur_dependencies = [ fusion_junction_reads_sam_file ],
                                                   lstr_cur_products = [ fusion_junction_reads_bed_file ] ) )

            self.sort_and_index_bed(fusion_junction_reads_bed_file, lcmd_commands)
        


        ## extract the fusion SPANNING reads
        fusion_spanning_reads_sam_file = bam_file + ".fusion_span_reads.sam"
        fusion_spanning_reads_info_file = bam_file + ".fusion_spanning_info"

        cmdstr = str(os.sep.join([UTILDIR, "get_fusion_SPANNING_reads_from_bam.from_chim_summary.pl"]) + " " +
                     mergedContig_gtf_filename + " " +
                     bam_file + " " + fusion_junction_info_file + 
                     " > " + fusion_spanning_reads_sam_file)

        lcmd_commands.append( Command.Command (str_cur_command = cmdstr,
                                              lstr_cur_dependencies = [ mergedContig_gtf_filename, bam_file, fusion_junction_info_file ],
                                              lstr_cur_products = [ fusion_spanning_reads_sam_file, fusion_spanning_reads_info_file ] ) )

        if args_parsed.write_intermediate_results:
            self.sort_sam_to_bam(fusion_spanning_reads_sam_file, mergedContig_fasta_filename, lcmd_commands)

            ## convert the fusion JUNCTION reads sam file to bed format
            fusion_spanning_reads_bed_file = bam_file + ".fusion_span_reads.bed"
            cmdstr = str(TRINITY_HOME + "/util/misc/SAM_pair_to_bed.pl " + fusion_spanning_reads_sam_file +
                         " > " + fusion_spanning_reads_bed_file)

            lcmd_commands.append( Command.Command ( str_cur_command = cmdstr,
                                                   lstr_cur_dependencies = [ fusion_spanning_reads_sam_file ],
                                                   lstr_cur_products = [ fusion_spanning_reads_bed_file ] ) )



            self.sort_and_index_bed(fusion_spanning_reads_bed_file, lcmd_commands)






    def sort_and_index_bed(self, bed_file, lcmd_commands):

        # sort by contig name followed by coordinate
        sorted_bed_file = bed_file + ".sorted.bed"

        cmdstr = str("sort -k1,1 -k2,2n " + bed_file + " > " + sorted_bed_file)
        lcmd_commands.append( Command.Command (str_cur_command = cmdstr,
                                               lstr_cur_dependencies = [ bed_file ],
                                               lstr_cur_products = [ sorted_bed_file ] ) )


        # index using tabix (preferred for IGV-web)
        cmdstr = str("bgzip -f " + sorted_bed_file)
        lcmd_commands.append( Command.Command (str_cur_command = cmdstr,
                                               lstr_cur_dependencies = [ sorted_bed_file ],
                                               lstr_cur_products = [ sorted_bed_file + ".gz" ] ) )

        cmdstr = str("tabix -p bed " + sorted_bed_file + ".gz")
        lcmd_commands.append( Command.Command (str_cur_command = cmdstr,
                                               lstr_cur_dependencies = [ sorted_bed_file + ".gz" ],
                                               lstr_cur_products = [ sorted_bed_file + ".gz.tbi" ] ) )


        return





    def sort_sam_to_bam(self, fusion_junction_reads_sam_file, mergedContig_fasta_filename, lcmd_commands):

        cmdstr = str("set -o pipefail & samtools view -bT " + mergedContig_fasta_filename + " " + fusion_junction_reads_sam_file +
                     " | samtools sort - " + fusion_junction_reads_sam_file)

        lcmd_commands.append( Command.Command( str_cur_command = cmdstr,
                                               lstr_cur_dependencies = [ fusion_junction_reads_sam_file ],
                                               lstr_cur_products = [ fusion_junction_reads_sam_file + ".bam" ] ) )

        # index it
        cmdstr = str("samtools index " + fusion_junction_reads_sam_file + ".bam")

        lcmd_commands.append( Command.Command( str_cur_command = cmdstr,
                                               lstr_cur_dependencies = [ fusion_junction_reads_sam_file + ".bam" ],
                                               lstr_cur_products = [ fusion_junction_reads_sam_file + ".bam.bai" ] ) )

        return



    def bam_to_bed(self, bam_file, lcmd_commands):
        ## convert the reads bam file to bed format
        cmdstr = str(TRINITY_HOME + "/util/misc/SAM_pair_to_bed.pl " + bam_file +
                     " > " + bam_file + ".bed")
        
        lcmd_commands.append( Command.Command ( str_cur_command = cmdstr,
                                                lstr_cur_dependencies = [ bam_file ],
                                                lstr_cur_products = [ bam_file + ".bed" ] ) )
        
        
        self.sort_and_index_bed(bam_file + ".bed", lcmd_commands)

        return


    
                                                                
    def add_fusion_read_alignment(self, args_parsed, mergedContig_fasta_filename, mergedContig_gtf_filename, lcmd_commands):
    
        reads_list_string = args_parsed.align_reads

        reads_list = reads_list_string.split(",")

        for reads_file in reads_list:

            reads_file_basename =  os.path.basename(reads_file)

            alignment_output_file_prefix = args_parsed.out_dirname + "/" + reads_file_basename
            
            cmdstr = str(TRINITY_HOME + "/util/misc/run_GSNAP.pl --genome " + mergedContig_fasta_filename +
                         " --reads " + reads_file +
                         " -G " + mergedContig_gtf_filename  + " --CPU 4 " +
                         " --out_prefix " + alignment_output_file_prefix)

            lcmd_commands.append( Command.Command( str_cur_command = cmdstr,
                                                   lstr_cur_dependencies = [ reads_file, mergedContig_fasta_filename, mergedContig_gtf_filename ],
                                                   lstr_cur_products = [ alignment_output_file_prefix + ".cSorted.bam" ] ) )
            


            ## convert the reads bam file to bed format
            cmdstr = str(TRINITY_HOME + "/util/misc/SAM_pair_to_bed.pl " + alignment_output_file_prefix + ".cSorted.bam" +
                         " > " + alignment_output_file_prefix + ".bed")

            lcmd_commands.append( Command.Command ( str_cur_command = cmdstr,
                                                   lstr_cur_dependencies = [ alignment_output_file_prefix + ".cSorted.bam" ],
                                                   lstr_cur_products = [ alignment_output_file_prefix + ".bed" ] ) )


            # filter out the reads that arent mapping to the corresponding fusion contig

            cmdstr = str(UTILDIR + "/restrict_bed_to_fusion_contig_mappings.pl " +
                         alignment_output_file_prefix + ".bed" + " > " + alignment_output_file_prefix + ".filtered.bed")

            lcmd_commands.append( Command.Command ( str_cur_command = cmdstr,
                                                    lstr_cur_dependencies = [ alignment_output_file_prefix + ".bed" ],
                                                    lstr_cur_products = [ alignment_output_file_prefix + ".filtered.bed" ] ) )


            self.sort_and_index_bed(alignment_output_file_prefix + ".filtered.bed", lcmd_commands)


        return
    
    
    

    def add_trinfusion_gmap_subpipe(self, args_parsed, mergedContig_fasta_filename, mergedContig_gtf_filename, trinity_fasta_filename, lcmd_commands, workdir):

        gmap_gff3_output_filename = os.sep.join([workdir, args_parsed.out_prefix + ".gmap_trinity_GG.gff3"])

        cmdstr = str(TRINITY_HOME + "/util/misc/process_GMAP_alignments_gff3_chimeras_ok.pl " +
                     "--genome " + mergedContig_fasta_filename + " --transcripts " + trinity_fasta_filename +
                     " --no_chimera > " + gmap_gff3_output_filename)

        lcmd_commands.append( Command.Command (str_cur_command = cmdstr,
                                               lstr_cur_dependencies = [ mergedContig_fasta_filename, trinity_fasta_filename ],
                                               lstr_cur_products = [ gmap_gff3_output_filename ] ) )
        
        
        ## extract the Trinity fusion transcripts
        trinity_fusion_trans_filename = os.sep.join([args_parsed.out_dirname, args_parsed.out_prefix + ".gmap_trinity_GG.fusions.gff3"])
        cmdstr = str(os.sep.join([UTILDIR, "get_Trinity_fusion_alignments_from_gff3.pl"]) + " " + mergedContig_gtf_filename +
                     " " + gmap_gff3_output_filename + " > " + trinity_fusion_trans_filename)
        lcmd_commands.append( Command.Command( str_cur_command = cmdstr,
                                               lstr_cur_dependencies = [ mergedContig_gtf_filename, gmap_gff3_output_filename ],
                                               lstr_cur_products = [ trinity_fusion_trans_filename ] ) )



        ## extract the Trinity Fusion transcripts
        trinityGG_fusion_fasta = os.sep.join([args_parsed.out_dirname, args_parsed.out_prefix + ".gmap_trinity_GG.fusions.fasta"])
        cmdstr = str(os.sep.join([UTILDIR, "get_Trinity_fusion_fasta_seqs.pl"]) + " " + trinity_fasta_filename + " " + trinity_fusion_trans_filename +
                     " > " + trinityGG_fusion_fasta)
        lcmd_commands.append( Command.Command( str_cur_command = cmdstr,
                                               lstr_cur_dependencies = [ trinity_fasta_filename, trinity_fusion_trans_filename ],
                                               lstr_cur_products = [ trinityGG_fusion_fasta ] ) )
    
        
                    


        
        # convert fusion trans to bed
        trinity_fusion_trans_bed_filename = trinity_fusion_trans_filename + ".bed"
        min_per_id = 95
        cmdstr = str(UTILDIR + "/transcript_gff3_to_bed.pl " + trinity_fusion_trans_filename +
                     " " + str(min_per_id) + " > " + trinity_fusion_trans_bed_filename)
        lcmd_commands.append( Command.Command( str_cur_command = cmdstr,
                                               lstr_cur_dependencies = [ trinity_fusion_trans_filename ],
                                               lstr_cur_products = [ trinity_fusion_trans_bed_filename ] ) )

        self.sort_and_index_bed(trinity_fusion_trans_bed_filename, lcmd_commands)

        
        
        

        return (trinity_fusion_trans_filename) # trinGG fusion gff3 file w/ breakpoints encoded


def ensure_full_path(file_or_dir):

    if file_or_dir[0] != '/' :
        file_or_dir = os.getcwd() + "/" + file_or_dir

    return(file_or_dir)

                          
    
if __name__ == "__main__":

    # Needed to run, calls the script
    DiscordAFuse().func_run_pipeline()

