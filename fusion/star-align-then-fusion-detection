#!/usr/bin/env perl

use strict;
use warnings;
use Carp;
use Cwd;
use FindBin;

use lib ("$FindBin::Bin/PerlLib");
use __GLOBALS__;
use Pipeliner;



my $usage = "usage: $0 left.fq right.fq output_directory\n\n";

my $left_fq = $ARGV[0] or die $usage;
my $right_fq = $ARGV[1] or die $usage;
my $output_dir = $ARGV[2] or die $usage;


my $UTILDIR = "$FindBin::Bin/util/star-fusion-util";

my $STAR_FUSION_DIR = $ENV{STAR_FUSION_DIR} or die "Error, need env var STAR_FUSION_DIR pointing to the STAR-Fusion installation directory";


main: {

    $left_fq = &ensure_full_path($left_fq);
    $right_fq = &ensure_full_path($right_fq);

    unless (-d $output_dir) {
        &process_cmd("mkdir -p $output_dir");
    }
    
    chdir $output_dir or die "Error, cannot cd to $output_dir";
    
    my $pipeliner = new Pipeliner(-verbose => 1);

    ## Run Star
    
    my $cmd = "STAR --genomeDir $FUSION_ANNOTATOR_LIB/Hg19.fa_star_index "
        . " --readFilesIn $left_fq $right_fq "
        . " --outSAMstrandField intronMotif "
        . " --outFilterIntronMotifs RemoveNoncanonicalUnannotated "
        . " --outReadsUnmapped None --chimSegmentMin 15 "
        . " --chimJunctionOverhangMin 15 "
        . " --alignMatesGapMax 200000 "
        . " --alignIntronMax 200000 "
        . " --runThreadN 4"
        . " --outSAMtype BAM SortedByCoordinate ";
    
    if ($left_fq =~ /\.gz$/) {
        $cmd .= " --readFilesCommand zcat ";
    }
    
    $pipeliner->add_commands(Command->new($cmd, "star.ok"));
 

    ##  assign fusion junctions to genes:

    $cmd = "/home/unix/bhaas/GITHUB/STAR-Fusion/STAR-Fusion -S Chimeric.out.sam -J Chimeric.out.junction -G $FUSION_ANNOTATOR_LIB/gencode.v19.annotation.gtf.exons";
    $pipeliner->add_commands( Command->new($cmd, "star-fusion.ok") );
    
    $pipeliner->run();

    exit(0);

    
}


####
sub ensure_full_path {
    my ($file) = @_;

    if ($file !~ m|^/|) {
        my $curr_dir = cwd();

        $file = "$curr_dir/$file";
    }
    
    return($file);
}

####
sub process_cmd {
    my ($cmd) = @_;

    print STDERR "CMD: $cmd\n";
    my $ret = system($cmd);

    if ($ret) {
        confess "Error, cmd: $cmd died with ret $ret";
    }

    return;
}
