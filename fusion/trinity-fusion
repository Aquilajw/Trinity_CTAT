#!/usr/bin/env perl

use strict;
use warnings;
use Carp;
use Getopt::Long qw(:config no_ignore_case bundling pass_through);
use FindBin;
use Cwd;
use lib ("$FindBin::Bin/PerlLib");
use __GLOBALS__;
use Pipeliner;

## configuration:
my $GENOME = "${FUSION_ANNOTATOR_LIB}/Hg19.fa";
my $GMAP_DB_DIR = "${FUSION_ANNOTATOR_LIB}";
my $GMAP_DB_NAME = "Hg19.fa.gmap";

my $REF_GTF = "${FUSION_ANNOTATOR_LIB}/gencode.v19.rna_seq_pipeline.gtf";

## end of configuration

my $CPU = 4;
my $MIN_TRANS_LEN_TRY_CHIM = 30;
my $output_directory = "Trinity_Fusion";

my $usage = <<__EOUSAGE__;

############################################################################################################
#
#  Required:
#
#  --transcripts|T <string>        :Trinity transcript fasta file
#
#  Optional:
#
#  --CPU <int>                     :number threads for GMAP (default $CPU)
#
#  --min_chim_len <int>            :minimum length for a chimeric alignment (default: $MIN_TRANS_LEN_TRY_CHIM)
#
#  --output|o <string>             :output directory name (default: $output_directory)
#
##############################################################################################################


__EOUSAGE__

    ;


my $help_flag;
my $transcripts_file;

my $DEBUG = 0;

&GetOptions ( 'help|h' => \$help_flag,
              
              'transcripts|T=s' => \$transcripts_file,
              
              'output|o=s' => \$output_directory,

              'min_chim_len=i' => \$MIN_TRANS_LEN_TRY_CHIM,

              'DEBUG' => \$DEBUG,

              'CPU=i' => \$CPU,
              
);


if ($help_flag) {
    die $usage;
}

unless ($transcripts_file) {
    die $usage;
}


$transcripts_file = &ensure_full_path($transcripts_file);


if ($output_directory) {
    
    unless (-d $output_directory) {
        mkdir $output_directory or die "Error, cannot mkdir $output_directory";
    }
    chdir $output_directory or die "Error, cannot cd to $output_directory";
}


my $UTILDIR = "$FindBin::Bin/util";

main: {


    my $pipeliner = new Pipeliner(-verbose => 1);

    ####################################################
    # run GMAP to identify potential fusion transcripts
    ####################################################

    my $gmap_output_file = "gmap.map.gff3";
    my $cmd = "gmap -D $GMAP_DB_DIR -d $GMAP_DB_NAME $transcripts_file -f 3 -n 0 -x $MIN_TRANS_LEN_TRY_CHIM -t $CPU  > $gmap_output_file 2>/dev/null";
    
    $pipeliner->add_commands(new Command($cmd, ".${gmap_output_file}.ok"));

    ###############################
    ## generate initial chim report
    ###############################

    my $chims_described_outfile = "$gmap_output_file.chims_described";
    $cmd = "$UTILDIR/gmap_genome_gff3_to_chim_summary.pl --gmap_gff3 $gmap_output_file --annot_gtf $REF_GTF > $chims_described_outfile";
    
    $pipeliner->add_commands(new Command($cmd, ".${chims_described_outfile}.ok") );
    
    #############################################################
    ## filter the chimeras based on distance from exon junctions:
    #############################################################

    my $chims_D0_outfile = "$chims_described_outfile.D0";
    $cmd = "$UTILDIR/filter_gmap_chims_via_dist_from_exon_bounds.pl $chims_described_outfile 0 > $chims_D0_outfile";
    
    $pipeliner->add_commands(new Command($cmd, ".${chims_D0_outfile}.ok") );

    ###############################################
    ## annotate the fusions, make a prettier report
    ###############################################
    
    my $annotation_report_file = "Trinity-Fusion.report.xls";
    $cmd = "$UTILDIR/write_TrinityFusion_annot_report.pl $chims_D0_outfile > $annotation_report_file";

    $pipeliner->add_commands(new Command($cmd, ".${annotation_report_file}.ok"));
    

    

    $pipeliner->run();
    
    exit(0); ### stopping here now.
    
}


####
sub ensure_full_path {
    my ($path) = @_;

    unless ($path =~ m|^/|) {
        $path = cwd() . "/$path";
    }

    return($path);
}

